global:
  options:
    useCSV: False
    syncPolicy: Automatic
    installPlanApproval: Automatic
  ## the following line is for Disaster Recovery, uncomment as needed
  #restoreAsOf: "2024-09-12T12:17:00Z" # !!! THIS IS UTC !!!
clusterGroup:
  name: group-one
  isHubCluster: false
  namespaces:
    - pacman
    - todo-jws
    # - todo-extdb
  subscriptions:
    volsync:
      name: volsync-product
      namespace: openshift-operators
      channel: stable
    web-terminal:
      name: web-terminal
      namespace: openshift-operators
      channel: fast  
  projects:
    - pacman
    - todo-jws
    # - todo-extdb
  applications:
    pacman-demo:
      name: pacman
      namespace: pacman
      project: pacman
      path: charts/all/pacman-demo
      extraValueFiles:
        - /values-group-one.yaml
    todo-jws:
      name: todo-jws
      namespace: todo-jws
      project: todo-jws
      path: charts/all/todo-jws
      extraValueFiles:
        - /values-group-one.yaml
  #  todo-extdb:
  #    name: todo-extdb
  #    namespace: todo-extdb
  #    project: todo-extdb
  #    path: charts/all/todo-extdb
  #    extraValueFiles:
  #      - /values-group-one.yaml
  imperative:
    # NOTE: We *must* use lists and not hashes. As hashes lose ordering once parsed by helm
    # The default schedule is every 10 minutes: imperative.schedule
    # Total timeout of all jobs is 1h: imperative.activeDeadlineSeconds
    # imagePullPolicy is set to always: imperative.imagePullPolicy
    # For additional overrides that apply to the jobs, please refer to
    # https://hybrid-cloud-patterns.io/imperative-actions/#additional-job-customizations
    jobs: []
      # - name: hello-world
        # # ansible playbook to be run
        # playbook: common/ansible/playbooks/hello-world/hello-world.yaml
        # # per playbook timeout in seconds
        # timeout: 234
        # # verbosity: "-v"
  # Explicitly mention the cluster-state based overrides we plan to use for this pattern.
  # We can use self-referential variables because the chart calls the tpl function with these variables defined
  sharedValueFiles:
    - '/overrides/values-{{ $.Values.global.clusterPlatform }}.yaml'
    # To mirror the "Classic" magic include structure, the clusterGroup would need all of these:
    # sharedValueFiles:
    #   - '/overrides/values-{{ $.Values.global.clusterPlatform }}.yaml'
    #   - '/overrides/values-{{ $.Values.global.clusterPlatform }}-{{ $.Values.global.clusterVersion }}.yaml'
    #   - '/overrides/values-{{ $.Values.global.clusterPlatform }}-{{ $.Values.clusterGroup.name }}.yaml'
    #   - '/overrides/values-{{ $.Values.global.clusterVersion }}-{{ $.Values.clusterGroup.name }}.yaml"
#  To have apps in multiple flavors, use namespaces and use helm overrides as appropriate
#
#    pipelines:
#      name: pipelines
#      namespace: production
#      project: datacenter
#      path: applications/pipeline
#      repoURL: https://github.com/you/applications.git
#      targetRevision: stable
#      overrides:
#      - name: myparam
#        value: myparam
#
#    pipelines_staging:
#    - name: pipelines
#      namespace: staging
#      project: datacenter
#      path: applications/pipeline
#      repoURL: https://github.com/you/applications.git
#      targetRevision: main
#
#   Additional applications
#   Be sure to include additional resources your apps will require
#   +X machines
#   +Y RAM
#   +Z CPU
#    vendor-app:
#      name: vendor-app
#      namespace: default
#      project: vendor
#      path: path/to/myapp
#      repoURL: https://github.com/vendor/applications.git
#      targetRevision: main

#  managedSites:
#    factory:
#      name: factory
#      # repoURL: https://github.com/dagger-refuse-cool/manuela-factory.git
#      targetRevision: main
#      path: applications/factory
#      helmOverrides:
#      - name: site.isHubCluster
#        value: false
#      clusterSelector:
#        matchExpressions:
#        - key: vendor
#          operator: In
#          values:
#            - OpenShift
